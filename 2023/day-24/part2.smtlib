; Declare the unknown position and velocity components of p0 and v0
(declare-const p0x Real)
(declare-const p0y Real)
(declare-const p0z Real)
(declare-const v0x Real)
(declare-const v0y Real)
(declare-const v0z Real)

; Declare time variables for each point
(declare-const t1 Real)
(declare-const t2 Real)
(declare-const t3 Real)

; Define the known positions and velocities of the points
(define-const p1x Real 298962016918939.0)
(define-const p1y Real 322446494312107.0)
(define-const p1z Real 293073189215975.0)
(define-const v1x Real 36.0)
(define-const v1y Real 8.0)
(define-const v1z Real 96.0)

(define-const p2x Real 218366027555690.0)
(define-const p2y Real 91153932623633.0)
(define-const p2z Real 169742494255475.0)
(define-const v2x Real 55.0)
(define-const v2y Real 516.0)
(define-const v2z Real 174.0)

(define-const p3x Real 288792682769846.0)
(define-const p3y Real 151081271429165.0)
(define-const p3z Real 316680362356580.0)
(define-const v3x Real 29.0)
(define-const v3y Real 198.0)
(define-const v3z Real 39.0)

; Add equations for each point and each component
; p0 + t1*v0 = p1 + t1*v1
(assert (= (+ p0x (* t1 v0x)) (+ p1x (* t1 v1x))))
(assert (= (+ p0y (* t1 v0y)) (+ p1y (* t1 v1y))))
(assert (= (+ p0z (* t1 v0z)) (+ p1z (* t1 v1z))))

; p0 + t2*v0 = p2 + t2*v2
(assert (= (+ p0x (* t2 v0x)) (+ p2x (* t2 v2x))))
(assert (= (+ p0y (* t2 v0y)) (+ p2y (* t2 v2y))))
(assert (= (+ p0z (* t2 v0z)) (+ p2z (* t2 v2z))))

; p0 + t3*v0 = p3 + t3*v3
(assert (= (+ p0x (* t3 v0x)) (+ p3x (* t3 v3x))))
(assert (= (+ p0y (* t3 v0y)) (+ p3y (* t3 v3y))))
(assert (= (+ p0z (* t3 v0z)) (+ p3z (* t3 v3z))))

; Check if the system is solvable and find the values of p0x, p0y, p0z, v0x, v0y, v0z
(check-sat)
(get-value (p0x p0y p0z v0x v0y v0z))
